
var questions = [
  {
    questionNo: 1,
    question: 'Objects are defined in Javascript using what characters?',
    choices: [{ text: "[ ]", correct: false }, { text: "( )", correct: false }, { text: "{ }", correct: true }, { text: "< >", correct: false }]
  },
  {
    questionNo: 2,
    question: 'What command allows you to use ouput generated by a function?',
    choices: [{ text: "access", correct: false }, { text: "return", correct: true }, { text: "print", correct: false }, { text: "call", correct: false }],
  },
  {
    questionNo: 3,
    question: "What symbol is a wildcard in Javascript?",
    choices: [{ text: "&", correct: false }, { text: "$", correct: false }, { text: "=", correct: false }, { text: "*", correct: true }]
  },
  {
    questionNo: 4,
    question: "Everything is a(n) ____________ in javascript. ",
    choices: [{ text: "file", correct: false }, { text: "object", correct: true }, { text: "array", correct: false }, { text: "challenge", correct: false }]
  },
  {
    questionNo: 5,
    question: "What syntax is used to define a variable in Javascript?",
    choices: [{ text: "make", correct: false }, { text: "var", correct: true }, { text: "constant", correct: false }, { text: "abs", correct: false }]
  }
]

var timerEl = document.getElementById("timer");
var questionEl = document.getElementById("question-text");
var choicesEl = document.getElementById('choices');
var timerRow = document.getElementById("timer-box");
var quizBlock = document.getElementById("quiz");
var startBlock = document.getElementById("splash");
var response = document.getElementById("response");
var resultsPg = document.getElementById("results-page");
var scoresPg = document.getElementById("scores-page");
var highScores = document.getElementById("high-scores")
var scoresBtn = document.getElementById('scores-btn')
var startBtn = document.getElementById('start-btn')
var enterScoresBtn = document.getElementById('enter-scores')
var enterBtn = document.getElementById('enter-btn')
var clearBtn = document.getElementById("clear-btn")
var scoreVal = document.querySelector('#score')
var currentQ = 0

function generateTimer(seconds) {
  timerEl.textContent = seconds;
  timerInt = setInterval(() => {
    var timerSecs = timerEl.textContent;
    if (timerSecs > 0) {
      timerEl.textContent = --timerSecs
    }
    else {
      clearInterval(timerInt)
      timerInt = null
      makeResults()
      return
    };
  }
    , 1000);
}

function startQuiz() {
  scoresPg.style.display = "none";
  startBlock.style.display = "none";
  timerRow.style.visibility = "visible";
  quizBlock.style.display = "block";
  generateTimer(60);
  generateQuestion(currentQ);
}

function generateQuestion(currentQ) {
  if (currentQ < questions.length) {
    questionEl.textContent = ""
    clearAll(choicesEl)
    questionEl.textContent = questions[currentQ].question;
    for (c = 0; c < questions[currentQ].choices.length; c++) {
      var choiceNode = document.createElement('button');
      var choiceCorrect = questions[currentQ].choices[c].correct;
      choiceNode.setAttribute('onclick', 'checkAnswer(event.target.dataset.correct)');
      // choiceNode.setAttribute('id', 'choiceBtn' + (c + 1));
      choiceNode.setAttribute('class', 'choice-btn');
      choiceNode.setAttribute('data-correct', choiceCorrect);
      choiceNode.textContent = questions[currentQ].choices[c].text;
      choicesEl.appendChild(choiceNode);
    }

  }
  else {
    clearInterval(timerInt)
    makeResults();
    return
  }
}

function checkAnswer(checkButton) {
  response.style.display = "block";
  response.style.opacity = "1"
  if (checkButton === "true") {
    response.textContent = "Correct!"
    currentQ += 1;
    generateQuestion(currentQ);
  }
  else {
    response.textContent = "Wrong. 5 seconds have been deducted from your time."
    timerEl.textContent -= 5;
  }
  $('#response').fadeOut(1000)
}

function makeResults() {
  currentScore = timerEl.textContent;
  timerRow.style.visibility = "hidden";
  response.style.display = "none";
  quizBlock.style.display = "none";
  resultsPg.style.display = "block";
  scoreVal.textContent = currentScore
}

loadHighScores = () => {
  currentScore = scoreVal.textContent
  initsVal = document.getElementById("initials")
  userInits = initsVal.value
  lastScore = localStorage.getItem(userInits)
  if (currentScore > lastScore) {
    localStorage.setItem(userInits, currentScore);
  }
  quizBlock.style.display = "none";
  resultsPg.style.display = "none";
  scoresPg.style.display = "block";
  timerRow.style.visibility = "hidden";
  clearAll(highScores)

  let scrHist = localStorage.getItem("initials") || "[]"
  scrHist = JSON.parse(scrHist)

  // for (i = 0; i < localStorage.length; i++) {
  for (const scoreHist of scrHist) {
    // score = localStorage.key(i) + " - " + localStorage.getItem(localStorage.key(i))
    score = localStorage.getItem()
    userHighScore = document.createElement('li')
    userHighScore.className = 'highscore'
    userHighScore.textContent = `${scoreHist}`
    highScores.appendChild(userHighScore)
  }
  currentQ = 0
  scoreVal.textContent = ""
  initsVal.value = ""
  clearInterval(timerInt)
}

clearScores = () => {
  localStorage.clear()
  clearAll(highScores)
}

clearAll = (element) => {
  element.replaceChildren()
}

scoresBtn.addEventListener('click', loadHighScores)
startBtn.addEventListener('click', startQuiz)
enterBtn.addEventListener('click', startQuiz)
enterScoresBtn.addEventListener('click', loadHighScores)
clearBtn.addEventListener('click', clearScores)

